describe("unique",function(){var e;beforeEach(module("ui.filters")),beforeEach(inject(function(t){e=t("unique")})),it("should return unique entries based on object equality",function(){var t=[{key:"value"},{key:"value2"},{key:"value"}];expect(e(t)).toEqual([{key:"value"},{key:"value2"}])}),it("should return unique entries based on object equality for complex objects",function(){var t=[{key:"value",other:"other1"},{key:"value2",other:"other2"},{other:"other1",key:"value"}];expect(e(t)).toEqual([{key:"value",other:"other1"},{key:"value2",other:"other2"}])}),it("should return unique entries based on the key provided",function(){var t=[{key:"value"},{key:"value2"},{key:"value"}];expect(e(t,"key")).toEqual([{key:"value"},{key:"value2"}])}),it("should return unique entries based on the key provided for complex objects",function(){var t=[{key:"value",other:"other1"},{key:"value2",other:"other2"},{key:"value",other:"other3"}];expect(e(t,"key")).toEqual([{key:"value",other:"other1"},{key:"value2",other:"other2"}])}),it("should return unique primitives in arrays",function(){expect(e([1,2,1,3])).toEqual([1,2,3])}),it("should work correctly for arrays of mixed elements and object equality",function(){expect(e([1,{key:"value"},1,{key:"value"},2,"string",3])).toEqual([1,{key:"value"},2,"string",3])}),it("should work correctly for arrays of mixed elements and a key specified",function(){expect(e([1,{key:"value"},1,{key:"value"},2,"string",3],"key")).toEqual([1,{key:"value"},2,"string",3])}),it("should return unmodified object if not array",function(){expect(e("string","someKey")).toEqual("string")}),it("should return unmodified array if provided key === false",function(){var t=[{key:"value1"},{key:"value2"}];expect(e(t,!1)).toEqual(t)})});