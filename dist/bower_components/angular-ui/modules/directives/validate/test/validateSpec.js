describe("uiValidate",function(e){var t,a,i=function(){return!0},o=function(){return!1},n=function(e){return e};beforeEach(module("ui")),beforeEach(inject(function(e,i){t=e.$new(),a=function(e,t){var a=angular.element(e),o=angular.element('<form name="form"></form>');return o.append(a),i(o)(t),t.$digest(),a}})),describe("initial validation",function(){it("should mark input as valid if initial model is valid",inject(function(){t.validate=i,a('<input name="input" ng-model="value" ui-validate="\'validate($value)\'">',t),expect(t.form.input.$valid).toBeTruthy(),expect(t.form.input.$error).toEqual({validator:!1})})),it("should mark input as invalid if initial model is invalid",inject(function(){t.validate=o,a('<input name="input" ng-model="value" ui-validate="\'validate($value)\'">',t),expect(t.form.input.$valid).toBeFalsy(),expect(t.form.input.$error).toEqual({validator:!0})}))}),describe("validation on model change",function(){it("should change valid state in response to model changes",inject(function(){t.value=!1,t.validate=n,a('<input name="input" ng-model="value" ui-validate="\'validate($value)\'">',t),expect(t.form.input.$valid).toBeFalsy(),t.$apply("value = true"),expect(t.form.input.$valid).toBeTruthy()}))}),describe("validation on element change",function(){var e;beforeEach(inject(function(t){e=t})),it("should change valid state in response to element events",function(){t.value=!1,t.validate=n;var i=a('<input name="input" ng-model="value" ui-validate="\'validate($value)\'">',t);expect(t.form.input.$valid).toBeFalsy(),i.val("true"),i.trigger(e.hasEvent("input")?"input":"change"),expect(t.form.input.$valid).toBeTruthy()})}),describe("multiple validators with custom keys",function(){it("should support multiple validators with custom keys",function(){t.validate1=i,t.validate2=o,a('<input name="input" ng-model="value" ui-validate="{key1 : \'validate1($value)\', key2 : \'validate2($value)\'}">',t),expect(t.form.input.$valid).toBeFalsy(),expect(t.form.input.$error.key1).toBeFalsy(),expect(t.form.input.$error.key2).toBeTruthy()})}),describe("uiValidateWatch",function(){function e(e){return e}beforeEach(function(){t.validateWatch=e}),it("should watch the string and refire the single validator",function(){t.watchMe=!1,a('<input name="input" ng-model="value" ui-validate="\'validateWatch(watchMe)\'" ui-validate-watch="\'watchMe\'">',t),expect(t.form.input.$valid).toBe(!1),expect(t.form.input.$error.validator).toBe(!0),t.$apply("watchMe=true"),expect(t.form.input.$valid).toBe(!0),expect(t.form.input.$error.validator).toBe(!1)}),it("should watch the string and refire all validators",function(){t.watchMe=!1,a('<input name="input" ng-model="value" ui-validate="{foo:\'validateWatch(watchMe)\',bar:\'validateWatch(watchMe)\'}" ui-validate-watch="\'watchMe\'">',t),expect(t.form.input.$valid).toBe(!1),expect(t.form.input.$error.foo).toBe(!0),expect(t.form.input.$error.bar).toBe(!0),t.$apply("watchMe=true"),expect(t.form.input.$valid).toBe(!0),expect(t.form.input.$error.foo).toBe(!1),expect(t.form.input.$error.bar).toBe(!1)}),it("should watch the all object attributes and each respective validator",function(){t.watchFoo=!1,t.watchBar=!1,a("<input name=\"input\" ng-model=\"value\" ui-validate=\"{foo:'validateWatch(watchFoo)',bar:'validateWatch(watchBar)'}\" ui-validate-watch=\"{foo:'watchFoo',bar:'watchBar'}\">",t),expect(t.form.input.$valid).toBe(!1),expect(t.form.input.$error.foo).toBe(!0),expect(t.form.input.$error.bar).toBe(!0),t.$apply("watchFoo=true"),expect(t.form.input.$valid).toBe(!1),expect(t.form.input.$error.foo).toBe(!1),expect(t.form.input.$error.bar).toBe(!0),t.$apply("watchBar=true"),t.$apply("watchFoo=false"),expect(t.form.input.$valid).toBe(!1),expect(t.form.input.$error.foo).toBe(!0),expect(t.form.input.$error.bar).toBe(!1),t.$apply("watchFoo=true"),expect(t.form.input.$valid).toBe(!0),expect(t.form.input.$error.foo).toBe(!1),expect(t.form.input.$error.bar).toBe(!1)})}),describe("error cases",function(){it("should fail if ngModel not present",inject(function(){expect(function(){a('<input name="input" ui-validate="\'validate($value)\'">',t)}).toThrow(new Error("No controller: ngModel"))})),it("should have no effect if validate expression is empty",inject(function(){a('<input ng-model="value" ui-validate="">',t)}))})});