describe("uiSelect2",function(){"use strict";function e(e){var l=o(e)(t);return t.$apply(),i.flush(),l}var t,o,i;beforeEach(module("ui.directives")),beforeEach(inject(function(e,l,s,n){t=e.$new(),o=l,i=n,t.options={query:function(e){var t={results:[{id:1,text:"first"}]};e.callback(t)}}})),describe("with a <select> element",function(){describe("compiling this directive",function(){it("should throw an error if we have no model defined",function(){expect(function(){e('<select type="text" ui-reset></select>')}).toThrow()}),it("should create proper DOM structure",function(){var t=e('<select ui-select2 ng-model="foo"></select>');expect(t.siblings().is("div.select2-container")).toBe(!0)})}),describe("when model is changed programmatically",function(){it("should set select2 to the value",function(){t.foo="First";var o=e('<select ui-select2 ng-model="foo"><option>First</option><option>Second</option></select>');expect(o.select2("val")).toBe("First"),t.$apply('foo = "Second"'),expect(o.select2("val")).toBe("Second")}),it("should set select2 to the value for multiples",function(){t.foo="First";var o=e('<select ui-select2 multiple ng-model="foo"><option>First</option><option>Second</option><option>Third</option></select>');expect(o.select2("val")).toEqual(["First"]),t.$apply('foo = ["Second"]'),expect(o.select2("val")).toEqual(["Second"]),t.$apply('foo = ["Second","Third"]'),expect(o.select2("val")).toEqual(["Second","Third"])})}),it("should observe the disabled attribute",function(){var o=e('<select ui-select2 ng-model="foo" ng-disabled="disabled"></select>');expect(o.siblings().hasClass("select2-container-disabled")).toBe(!1),t.$apply("disabled = true"),expect(o.siblings().hasClass("select2-container-disabled")).toBe(!0),t.$apply("disabled = false"),expect(o.siblings().hasClass("select2-container-disabled")).toBe(!1)}),it("should observe the multiple attribute",function(){var e=o('<select ui-select2 ng-model="foo" ng-multiple="multiple"></select>')(t);expect(e.siblings().hasClass("select2-container-multi")).toBe(!1),t.$apply("multiple = true"),expect(e.siblings().hasClass("select2-container-multi")).toBe(!0),t.$apply("multiple = false"),expect(e.siblings().hasClass("select2-container-multi")).toBe(!1)}),it("should observe an option with ng-repeat for changes",function(){t.items=["first","second","third"],t.foo="fourth";var o=e('<select ui-select2 ng-model="foo"><option ng-repeat="item in items">{{item}}</option></select>');expect(o.select2("val")).toNotBe("fourth"),t.$apply('items=["fourth"]'),i.flush(),expect(o.select2("val")).toBe("fourth")})}),describe("with an <input> element",function(){describe("compiling this directive",function(){it("should throw an error if we have no model defined",function(){expect(function(){e("<input ui-select2/>")}).toThrow()}),it("should creae proper DOM structure",function(){var t=e('<input ui-select2="options" ng-model="foo"/>');expect(t.siblings().is("div.select2-container")).toBe(!0)})}),describe("when model is changed programmatically",function(){describe("for single-select",function(){it("should call select2(data, ...) for objects",function(){var o=e('<input ng-model="foo" ui-select2="options">');spyOn($.fn,"select2"),t.$apply('foo={ id: 1, text: "first" }'),expect(o.select2).toHaveBeenCalledWith("data",{id:1,text:"first"})}),it("should call select2(val, ...) for strings",function(){var o=e('<input ng-model="foo" ui-select2="options">');spyOn($.fn,"select2"),t.$apply('foo="first"'),expect(o.select2).toHaveBeenCalledWith("val","first")})}),describe("for multi-select",function(){it("should call select2(data, ...) for arrays",function(){var o=e('<input ng-model="foo" multiple ui-select2="options">');spyOn($.fn,"select2"),t.$apply('foo=[{ id: 1, text: "first" },{ id: 2, text: "second" }]'),expect(o.select2).toHaveBeenCalledWith("data",[{id:1,text:"first"},{id:2,text:"second"}])}),it("should call select2(data, []) for falsey values",function(){var o=e('<input ng-model="foo" multiple ui-select2="options">');spyOn($.fn,"select2"),t.$apply("foo=[]"),expect(o.select2).toHaveBeenCalledWith("data",[])}),it("should call select2(val, ...) for strings",function(){var o=e('<input ng-model="foo" multiple ui-select2="options">');spyOn($.fn,"select2"),t.$apply('foo="first,second"'),expect(o.select2).toHaveBeenCalledWith("val","first,second")})})}),it("should set the model when the user selects an item",function(){e('<input ng-model="foo" multiple ui-select2="options">')})})});